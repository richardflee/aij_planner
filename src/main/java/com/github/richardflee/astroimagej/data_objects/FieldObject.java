package com.github.richardflee.astroimagej.data_objects;


import com.github.richardflee.astroimagej.utils.AstroCoords;

/**
 * Single record resulting from an on-line catalog database query. Instances of this class
 * encapsulate coordinate and magnitude data for a single Comparison or
 * Reference star.
 */
public class FieldObject extends BaseFieldObject {
	
	private double mag = 0.0;
	private double magErr = 0.0;

	private Integer nObs = 1;
//	private double radSepAmin = 0.0;

	private FieldObject target = null;
	private String apertureId = "Cnn"; 
	private boolean selected = true;
	private boolean accepted = true;
	// private boolean isTarget = false;
	
//	private double deltaMag = 0.0;

	/**
	 * No arg constructor, default Sirius parameters
	 */	
	public FieldObject() {
		super( "sirius", 
				AstroCoords.raHmsToRaHr("06:45:08.917"),
				AstroCoords.decDmsToDecDeg("-16:42:58.02"));		
		this.mag = -1.46;
		this.magErr = 0.02;
	}
	
	/**
	 * Four parameter constructor
	 * 
	 * @param objectId object identifier
	 * @param raHr J2000 RA in hour (0 to 24 hr)
	 * @param decDeg J2000 Dec in degree (±90°)
	 * @param mag catalog magnitude for current filter band
	 * @param magErr estimate uncertainty in mag value
	 */
	public FieldObject(String objectId, double raHr, double decDeg, double mag, double magErr) {
		super(objectId, raHr, decDeg);

		this.mag = mag;
		this.magErr = magErr;
	}
	

	
	public void setTarget(FieldObject target) {
		this.target = target;
	}
	
	public boolean isTarget() {
		return (this.target == null);
	}
	
	
	
	/**
	 * Computes angular distance in arcmin between current object and the target object
	 * Eqn: A = acos(sin(dec)*sin(dec0)+cos(dec)*cos(dec0)*cos(ra-ra0))
	 * where (ra0, dec0) and (ra, dec) are astro coordinates for target & this object in DEGREEs
	 * 
	 * @param target target FieldObject 
	 */
	public double getRadSepAmin() {		
		if (this.isTarget()) {
			return 0.0;
		}
		
		double ra = Math.toRadians(raHr * 15.0);
		double ra0 = Math.toRadians(this.target.getRaHr() * 15.0);

		double dec = Math.toRadians(decDeg);
		double dec0 = Math.toRadians(this.target.getDecDeg());

		double cosA = Math.sin(dec) * Math.sin(dec0) + Math.cos(dec) * Math.cos(dec0) * Math.cos(ra - ra0);
		return Math.toDegrees(Math.acos(cosA)) * 60.0;
	}
	
	public double getDeltaMag() {
		if (this.isTarget()) {
			return 0.0;
		}
		return this.mag - this.target.getMag();		
	}
	
	

	// autogenerated getters, setters and toString methods
	public String getApertureId() {
		return apertureId;
	}

	public void setApertureId(String apertureId) {
		this.apertureId = apertureId;
	}

	public Integer getnObs() {
		return nObs;
	}

	public void setnObs(Integer nObs) {
		this.nObs = nObs;
	}

	public String getObjectId() {
		return objectId;
	}

	public double getRaHr() {
		return raHr;
	}

	public void setRaHr(double raHr) {
		this.raHr = raHr;
	}

	public double getDecDeg() {
		return decDeg;
	}

	public void setDecDeg(double decDeg) {
		this.decDeg = decDeg;
	}

	public double getMag() {
		return mag;
	}


	public void setMag(double mag) {
		this.mag = mag;
	}

	public double getMagErr() {
		return magErr;
	}

	public void setMagErr(double magErr) {
		this.magErr = magErr;
	}
	
	public boolean isSelected() {
		return selected;
	}


	public void setSelected(boolean selected) {
		this.selected = selected;
	}

	public boolean isAccepted() {
		return accepted;
	}


	public void setAccepted(boolean accepted) {
		this.accepted = accepted;
	}
	
	@Override
	public String toString() {
		return "FieldObject [mag=" + mag + ", magErr=" + magErr + ", nObs=" + nObs + ", target=" + target
				+ ", apertureId=" + apertureId + ", selected=" + selected + ", accepted=" + accepted + ", objectId="
				+ objectId + ", raHr=" + raHr + ", decDeg=" + decDeg + "]";
	}

	public static void main(String[] args) {

		FieldObject wasp12 = new FieldObject("wasp12", 6.50862013, 29.688453, 12.345, 0.23);
		
		System.out.println(wasp12.toString());
		
		FieldObject fo2 = new FieldObject(null, 6.50862013, 29.688453, 14.716, 0.09);
		String testId = "06303103+29411843";
		
		System.out.println(testId);
		System.out.println(fo2.getObjectId());		
		
		var sirius = new FieldObject();
		sirius.setTarget(wasp12);		
		System.out.println(String.format("wasp12 is target object %b",  wasp12.isTarget()));
		System.out.println(String.format("sirius is target object %b",  sirius.isTarget()));
		
		
		System.out.println(wasp12.toString());
		System.out.println(sirius.toString());
		System.out.println();
		
		var sep = sirius.getRadSepAmin();
		System.out.println(String.format("Compare ref & computed Radial sep in amin = %.2f, %.2f", 2792.31, sep));
		
		var diff = sirius.getDeltaMag();
		System.out.println(String.format("Compare ref & computed delta mag = %.2f, %.2f", -1.46 - 12.345, diff));
	}

}

//// copy constructor
//public FieldObject (FieldObject fo) {
//	super(fo.getObjectId(), fo.getRaHr(), fo.getDecDeg());
//	
//	this.mag = fo.getMag();
//	this.magErr = fo.getMagErr();
//	this.nObs = fo.getnObs();
//	this.apertureId = fo.getApertureId();
//	this.selected = fo.isSelected();
//}
//

